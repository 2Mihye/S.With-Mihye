
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace = "lm.swith.main.mapper.StudyPostMapper">


	<!-- 스터디 전체 목록 -->
	<!-- 스터디 포스트 및 기술 스택 정보 조회 -->
	<select id="getAllStudyPostWithSkills" resultMap="studyPostWithSkills">
	    SELECT sp.*, s.skill_name, s.img
	    FROM study_post sp
	    LEFT JOIN post_tech_stacks pts ON sp.post_no = pts.post_no
	    LEFT JOIN skill s ON pts.skill_no = s.skill_no
	</select>
	
	<resultMap id="studyPostWithSkills" type="lm.swith.main.vo.StudyPost">
	    <id property="post_no" column="post_no"/>
	    <!-- 나머지 필드들도 매핑 -->
	    <collection property="skills" ofType="lm.swith.main.vo.Skill">
	        <id property="skill_no" column="skill_no"/>
	        <result property="skill_name" column="skill_name"/>
	        <result property="img" column="img"/>
	    </collection>
	</resultMap>
	
	
	
	
	<!-- 스터디 상세 페이지 -->
	<!-- 특정 post_no에 해당하는 스터디 포스트 및 기술 스택 정보 조회 -->
	<select id="getStudyPostWithSkillsByPostNo" resultMap="studyPostWithSkills">
	    SELECT sp.*, s.skill_name, s.img
	    FROM study_post sp
	    LEFT JOIN post_tech_stacks pts ON sp.post_no = pts.post_no
	    LEFT JOIN skill s ON pts.skill_no = s.skill_no
	    WHERE sp.post_no = #{post_no}
	</select>
	
	
	
	
	
	<!-- 스터디 등록 -->
	<insert id="insertStudyPost" parameterType="lm.swith.main.vo.StudyPost">
	    <selectKey keyProperty="post_no" resultType="java.lang.Long" order="BEFORE">
	        SELECT post_no_seq.NEXTVAL FROM DUAL
	    </selectKey>
	    
	    <!-- 첫 번째 쿼리: study_post 테이블에 스터디 정보 삽입 -->
	    INSERT INTO study_post (
	        POST_NO, USER_NO, STUDY_TITLE, STUDY_CONTENT,
	        STUDY_METHOD, RECRUIT_TYPE, STUDY_PERIOD,
	        STUDY_START, RECRUIT_DEADLINE, STUDY_STATUS,
	        STUDY_LIKES, STUDY_LOCATION, STUDY_PLACE, STUDY_POST_TIME
	    ) VALUES (
	        #{post_no}, #{user_no}, #{study_title}, #{study_content},
	        #{study_method}, #{recruit_type}, #{study_period},
	        #{study_start}, #{recruit_deadline}, #{study_status},
	        #{study_likes}, #{study_location}, #{study_place}, SYSDATE
	    )
	
	    <!-- 두 번째 쿼리: post_tech_stacks 테이블에 기술 스택 정보 삽입 -->
	    <foreach collection="skills" item="skill" separator=";">
	        INSERT INTO post_tech_stacks (post_no, skill_no)
	        VALUES (#{post_no}, #{skill})
	    </foreach>
	
	    <!-- 세 번째 쿼리: users 테이블에서 nickname 정보 가져와서 업데이트 -->
	    UPDATE study_post sp
	    SET sp.nickname = (SELECT nickname FROM users u WHERE u.user_no = sp.user_no)
	    WHERE sp.post_no = #{post_no}
	</insert>
	
	
	
	
	
	<!-- 조건 select 문 parameterType="Map" -->
	<select id="getStudiesbySelect" parameterType="String" resultType="lm.swith.main.vo.StudyPost">
    SELECT DISTINCT *
    FROM (
        <!-- 기술스택별 스터디 목록 -->
        SELECT sp.*
        FROM study_post sp
        JOIN post_tech_stacks pts ON sp.post_no = pts.post_no
        WHERE pts.skill_no = #{skill_no}

        UNION

        <!-- 모집구분별 스터디 목록 -->
        SELECT *
        FROM study_post
        WHERE recruit_type = #{recruit_type}

        UNION

        <!-- 진행방식별 스터디 목록 -->
        SELECT *
        FROM study_post
        WHERE study_method = #{study_method}

        UNION

        <!-- 지역별 스터디 목록 -->
        SELECT *
        FROM study_post 
        WHERE study_location = #{study_location}
    ) AS uniqueStudies
	</select>
	
	
	
	
	
	<!-- 키워드 검색결과 스터디 목록 -->
	<select id="getStudiesByKeyword">
	    SELECT * FROM study_post 
	    WHERE study_title LIKE '%' || #{keyword} || '%'
	    OR study_content LIKE '%' || #{keyword}|| '%'
	</select>
	
	
	
	
	<!-- 스터디 수정 -->
	<insert id="insertStudyPost" parameterType="lm.swith.main.vo.StudyPost">
	    <selectKey keyProperty="post_no" resultType="java.lang.Long" order="BEFORE">
	        SELECT post_no_seq.NEXTVAL FROM DUAL
	    </selectKey>
	    
	    <!-- 첫 번째 쿼리: study_post 테이블에 스터디 정보 삽입 -->
	    INSERT INTO study_post (
	        POST_NO, USER_NO, STUDY_TITLE, STUDY_CONTENT,
	        STUDY_METHOD, RECRUIT_TYPE, STUDY_PERIOD,
	        STUDY_START, RECRUIT_DEADLINE, STUDY_STATUS,
	        STUDY_LOCATION, STUDY_PLACE, STUDY_POST_TIME
	    ) VALUES (
	        #{post_no}, #{user_no}, #{study_title}, #{study_content},
	        #{study_method}, #{recruit_type}, #{study_period},
	        #{study_start}, #{recruit_deadline}, #{study_status},
	        #{study_location}, #{study_place}, SYSDATE
	    )
	
	    <!-- 두 번째 쿼리: post_tech_stacks 테이블에 기술 스택 정보 삽입 -->
	    <foreach collection="skills" item="skill" separator=";">
	        INSERT INTO post_tech_stacks (post_no, skill_no)
	        VALUES (#{post_no}, #{skill})
	    </foreach>
	
	    <!-- 세 번째 쿼리: users 테이블에서 nickname 정보 가져와서 업데이트 -->
	    UPDATE study_post sp
	    SET sp.nickname = (SELECT nickname FROM users u WHERE u.user_no = sp.user_no)
	    WHERE sp.post_no = #{post_no}
	</insert>
	
	
	
	
	
	
	<!-- 스터디 삭제 -->
	<delete id="deleteStudyPost" parameterType="Long">
	    <!-- 첫 번째 쿼리: study_post 테이블에서 해당 post_no에 대한 스터디 정보 삭제 -->
	    DELETE FROM study_post WHERE post_no = #{post_no}
	    
	    <!-- 두 번째 쿼리: post_tech_stacks 테이블에서 해당 post_no에 대한 기술 스택 정보 삭제 -->
	    DELETE FROM post_tech_stacks WHERE post_no = #{post_no}
	</delete>
</mapper>